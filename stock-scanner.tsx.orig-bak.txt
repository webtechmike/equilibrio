import React, { useState, useEffect, useMemo } from 'react';
import { Search, TrendingUp, TrendingDown, Filter, RefreshCw, Download, ChevronDown, ChevronUp } from 'lucide-react';

// Types
interface StockData {
  symbol: string;
  name: string;
  price: number;
  change: number;
  changePercent: number;
  volume: number;
  sector: string;
  industry: string;
  marketCap: number;
  rsi: number;
  stochRsi: number;
  historicRsiAvg: number;
  sma50: number;
  sma200: number;
  ema20: number;
  macd: number;
  macdSignal: number;
  macdHistogram: number;
  equilibriumLevel: number;
  priceToEquilibrium: number;
  trend: 'bullish' | 'bearish' | 'neutral';
  signal: 'buy' | 'sell' | 'hold';
  volumeProfile: 'high' | 'medium' | 'low';
  distanceFrom52WeekHigh: number;
  distanceFrom52WeekLow: number;
}

interface FilterState {
  searchTerm: string;
  sectors: string[];
  rsiMin: number;
  rsiMax: number;
  priceMin: number;
  priceMax: number;
  volumeProfile: string[];
  signals: string[];
  trend: string[];
  equilibriumZone: string[];
}

// Mock data generator with realistic technical indicators
const generateMockStockData = (): StockData[] => {
  const sectors = [
    'Technology', 'Healthcare', 'Financial', 'Consumer Cyclical', 
    'Energy', 'Industrials', 'Consumer Defensive', 'Real Estate',
    'Communication Services', 'Utilities', 'Basic Materials'
  ];
  
  const industries = {
    'Technology': ['Software', 'Semiconductors', 'Hardware', 'IT Services'],
    'Healthcare': ['Biotechnology', 'Pharmaceuticals', 'Medical Devices', 'Healthcare Plans'],
    'Financial': ['Banks', 'Insurance', 'Asset Management', 'Capital Markets'],
    'Consumer Cyclical': ['Retail', 'Automotive', 'Apparel', 'Restaurants'],
    'Energy': ['Oil & Gas', 'Renewable Energy', 'Utilities'],
    'Industrials': ['Aerospace', 'Construction', 'Manufacturing', 'Transportation'],
    'Consumer Defensive': ['Food Products', 'Beverages', 'Household Products'],
    'Real Estate': ['REITs', 'Real Estate Services', 'Development'],
    'Communication Services': ['Telecom', 'Media', 'Entertainment'],
    'Utilities': ['Electric', 'Gas', 'Water'],
    'Basic Materials': ['Chemicals', 'Metals & Mining', 'Paper & Forest Products']
  };

  const tickers = [
    { symbol: 'AAPL', name: 'Apple Inc.', sector: 'Technology' },
    { symbol: 'MSFT', name: 'Microsoft Corp.', sector: 'Technology' },
    { symbol: 'GOOGL', name: 'Alphabet Inc.', sector: 'Communication Services' },
    { symbol: 'AMZN', name: 'Amazon.com Inc.', sector: 'Consumer Cyclical' },
    { symbol: 'NVDA', name: 'NVIDIA Corp.', sector: 'Technology' },
    { symbol: 'TSLA', name: 'Tesla Inc.', sector: 'Consumer Cyclical' },
    { symbol: 'META', name: 'Meta Platforms', sector: 'Communication Services' },
    { symbol: 'BRK.B', name: 'Berkshire Hathaway', sector: 'Financial' },
    { symbol: 'JNJ', name: 'Johnson & Johnson', sector: 'Healthcare' },
    { symbol: 'JPM', name: 'JPMorgan Chase', sector: 'Financial' },
    { symbol: 'V', name: 'Visa Inc.', sector: 'Financial' },
    { symbol: 'PG', name: 'Procter & Gamble', sector: 'Consumer Defensive' },
    { symbol: 'MA', name: 'Mastercard Inc.', sector: 'Financial' },
    { symbol: 'HD', name: 'Home Depot', sector: 'Consumer Cyclical' },
    { symbol: 'BAC', name: 'Bank of America', sector: 'Financial' },
    { symbol: 'XOM', name: 'Exxon Mobil', sector: 'Energy' },
    { symbol: 'CVX', name: 'Chevron Corp.', sector: 'Energy' },
    { symbol: 'ABBV', name: 'AbbVie Inc.', sector: 'Healthcare' },
    { symbol: 'KO', name: 'Coca-Cola Co.', sector: 'Consumer Defensive' },
    { symbol: 'PFE', name: 'Pfizer Inc.', sector: 'Healthcare' },
    { symbol: 'AVGO', name: 'Broadcom Inc.', sector: 'Technology' },
    { symbol: 'COST', name: 'Costco Wholesale', sector: 'Consumer Defensive' },
    { symbol: 'TMO', name: 'Thermo Fisher', sector: 'Healthcare' },
    { symbol: 'NKE', name: 'Nike Inc.', sector: 'Consumer Cyclical' },
    { symbol: 'DIS', name: 'Walt Disney Co.', sector: 'Communication Services' },
    { symbol: 'NFLX', name: 'Netflix Inc.', sector: 'Communication Services' },
    { symbol: 'AMD', name: 'Advanced Micro Devices', sector: 'Technology' },
    { symbol: 'INTC', name: 'Intel Corp.', sector: 'Technology' },
    { symbol: 'CSCO', name: 'Cisco Systems', sector: 'Technology' },
    { symbol: 'ADBE', name: 'Adobe Inc.', sector: 'Technology' },
    { symbol: 'CRM', name: 'Salesforce Inc.', sector: 'Technology' },
    { symbol: 'ORCL', name: 'Oracle Corp.', sector: 'Technology' },
    { symbol: 'SPY', name: 'S&P 500 ETF', sector: 'Financial' },
    { symbol: 'QQQ', name: 'Nasdaq-100 ETF', sector: 'Financial' },
    { symbol: 'IWM', name: 'Russell 2000 ETF', sector: 'Financial' },
  ];

  return tickers.map(ticker => {
    const basePrice = Math.random() * 500 + 50;
    const changePercent = (Math.random() - 0.5) * 10;
    const rsi = Math.random() * 100;
    const sma50 = basePrice * (0.9 + Math.random() * 0.2);
    const sma200 = basePrice * (0.85 + Math.random() * 0.3);
    const high52Week = basePrice * (1 + Math.random() * 0.3);
    const low52Week = basePrice * (0.7 + Math.random() * 0.2);
    
    // Calculate equilibrium (50% retracement from low to high)
    const equilibriumLevel = (high52Week + low52Week) / 2;
    const priceToEquilibrium = ((basePrice - equilibriumLevel) / equilibriumLevel) * 100;
    
    const macd = (Math.random() - 0.5) * 5;
    const macdSignal = macd + (Math.random() - 0.5) * 2;
    
    // Determine trend based on moving averages
    let trend: 'bullish' | 'bearish' | 'neutral' = 'neutral';
    if (basePrice > sma50 && sma50 > sma200) trend = 'bullish';
    else if (basePrice < sma50 && sma50 < sma200) trend = 'bearish';
    
    // Determine signal based on RSI and equilibrium
    let signal: 'buy' | 'sell' | 'hold' = 'hold';
    if (rsi < 40 && priceToEquilibrium < -10) signal = 'buy';
    else if (rsi > 70 && priceToEquilibrium > 10) signal = 'sell';
    
    // Volume profile based on volume
    const avgVolume = Math.random() * 100000000;
    let volumeProfile: 'high' | 'medium' | 'low' = 'medium';
    if (avgVolume > 50000000) volumeProfile = 'high';
    else if (avgVolume < 10000000) volumeProfile = 'low';

    const industryList = industries[ticker.sector] || ['General'];
    const industry = industryList[Math.floor(Math.random() * industryList.length)];

    return {
      symbol: ticker.symbol,
      name: ticker.name,
      price: basePrice,
      change: basePrice * (changePercent / 100),
      changePercent,
      volume: avgVolume,
      sector: ticker.sector,
      industry,
      marketCap: basePrice * (Math.random() * 1000000000 + 100000000),
      rsi,
      stochRsi: Math.random() * 100,
      historicRsiAvg: 50 + (Math.random() - 0.5) * 20,
      sma50,
      sma200,
      ema20: basePrice * (0.95 + Math.random() * 0.1),
      macd,
      macdSignal,
      macdHistogram: macd - macdSignal,
      equilibriumLevel,
      priceToEquilibrium,
      trend,
      signal,
      volumeProfile,
      distanceFrom52WeekHigh: ((basePrice - high52Week) / high52Week) * 100,
      distanceFrom52WeekLow: ((basePrice - low52Week) / low52Week) * 100,
    };
  });
};

const StockScanner: React.FC = () => {
  const [stocks, setStocks] = useState<StockData[]>([]);
  const [loading, setLoading] = useState(false);
  const [sortField, setSortField] = useState<keyof StockData>('symbol');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
  const [expandedRow, setExpandedRow] = useState<string | null>(null);
  
  const [filters, setFilters] = useState<FilterState>({
    searchTerm: '',
    sectors: [],
    rsiMin: 0,
    rsiMax: 100,
    priceMin: 0,
    priceMax: 10000,
    volumeProfile: [],
    signals: [],
    trend: [],
    equilibriumZone: [],
  });

  useEffect(() => {
    loadStocks();
    const interval = setInterval(loadStocks, 30000); // Refresh every 30 seconds
    return () => clearInterval(interval);
  }, []);

  const loadStocks = () => {
    setLoading(true);
    setTimeout(() => {
      setStocks(generateMockStockData());
      setLoading(false);
    }, 500);
  };

  const filteredStocks = useMemo(() => {
    let result = stocks.filter(stock => {
      // Search term filter
      if (filters.searchTerm && 
          !stock.symbol.toLowerCase().includes(filters.searchTerm.toLowerCase()) &&
          !stock.name.toLowerCase().includes(filters.searchTerm.toLowerCase())) {
        return false;
      }

      // Sector filter
      if (filters.sectors.length > 0 && !filters.sectors.includes(stock.sector)) {
        return false;
      }

      // RSI filter
      if (stock.rsi < filters.rsiMin || stock.rsi > filters.rsiMax) {
        return false;
      }

      // Price filter
      if (stock.price < filters.priceMin || stock.price > filters.priceMax) {
        return false;
      }

      // Volume profile filter
      if (filters.volumeProfile.length > 0 && !filters.volumeProfile.includes(stock.volumeProfile)) {
        return false;
      }

      // Signal filter
      if (filters.signals.length > 0 && !filters.signals.includes(stock.signal)) {
        return false;
      }

      // Trend filter
      if (filters.trend.length > 0 && !filters.trend.includes(stock.trend)) {
        return false;
      }

      // Equilibrium zone filter
      if (filters.equilibriumZone.length > 0) {
        const inDiscount = stock.priceToEquilibrium < -5;
        const inEquilibrium = stock.priceToEquilibrium >= -5 && stock.priceToEquilibrium <= 5;
        const inPremium = stock.priceToEquilibrium > 5;

        if (filters.equilibriumZone.includes('discount') && !inDiscount) return false;
        if (filters.equilibriumZone.includes('equilibrium') && !inEquilibrium) return false;
        if (filters.equilibriumZone.includes('premium') && !inPremium) return false;
      }

      return true;
    });

    // Sorting
    result.sort((a, b) => {
      const aVal = a[sortField];
      const bVal = b[sortField];
      
      if (typeof aVal === 'number' && typeof bVal === 'number') {
        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;
      }
      
      const aStr = String(aVal);
      const bStr = String(bVal);
      return sortDirection === 'asc' 
        ? aStr.localeCompare(bStr)
        : bStr.localeCompare(aStr);
    });

    return result;
  }, [stocks, filters, sortField, sortDirection]);

  const handleSort = (field: keyof StockData) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSectorList = () => [...new Set(stocks.map(s => s.sector))].sort();

  const exportToCSV = () => {
    const headers = ['Symbol', 'Name', 'Price', 'Change%', 'RSI', 'Trend', 'Signal', 'Equilibrium', 'Sector'];
    const rows = filteredStocks.map(s => [
      s.symbol,
      s.name,
      s.price.toFixed(2),
      s.changePercent.toFixed(2),
      s.rsi.toFixed(1),
      s.trend,
      s.signal,
      s.priceToEquilibrium.toFixed(1) + '%',
      s.sector
    ]);
    
    const csv = [headers, ...rows].map(row => row.join(',')).join('\n');
    const blob = new Blob([csv], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `stock_scan_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
  };

  const getEquilibriumColor = (value: number) => {
    if (value < -5) return 'text-green-600 bg-green-50';
    if (value > 5) return 'text-red-600 bg-red-50';
    return 'text-yellow-600 bg-yellow-50';
  };

  const getEquilibriumZone = (value: number) => {
    if (value < -5) return 'Discount';
    if (value > 5) return 'Premium';
    return 'Equilibrium';
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-slate-800">Stock Scanner</h1>
              <p className="text-slate-600 mt-1">Equilibrium-based swing trading analysis</p>
            </div>
            <div className="flex gap-3">
              <button
                onClick={loadStocks}
                disabled={loading}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition"
              >
                <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
                Refresh
              </button>
              <button
                onClick={exportToCSV}
                className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition"
              >
                <Download className="w-4 h-4" />
                Export CSV
              </button>
            </div>
          </div>

          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
            <input
              type="text"
              placeholder="Search by symbol or name..."
              value={filters.searchTerm}
              onChange={(e) => setFilters({ ...filters, searchTerm: e.target.value })}
              className="w-full pl-10 pr-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
        </div>

        {/* Filters */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center gap-2 mb-4">
            <Filter className="w-5 h-5 text-slate-600" />
            <h2 className="text-lg font-semibold text-slate-800">Filters</h2>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* RSI Range */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                RSI Range: {filters.rsiMin} - {filters.rsiMax}
              </label>
              <div className="flex gap-2">
                <input
                  type="number"
                  value={filters.rsiMin}
                  onChange={(e) => setFilters({ ...filters, rsiMin: Number(e.target.value) })}
                  className="w-20 px-2 py-1 border border-slate-300 rounded"
                  min="0"
                  max="100"
                />
                <input
                  type="number"
                  value={filters.rsiMax}
                  onChange={(e) => setFilters({ ...filters, rsiMax: Number(e.target.value) })}
                  className="w-20 px-2 py-1 border border-slate-300 rounded"
                  min="0"
                  max="100"
                />
              </div>
            </div>

            {/* Price Range */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Price Range
              </label>
              <div className="flex gap-2">
                <input
                  type="number"
                  value={filters.priceMin}
                  onChange={(e) => setFilters({ ...filters, priceMin: Number(e.target.value) })}
                  className="w-24 px-2 py-1 border border-slate-300 rounded"
                  placeholder="Min"
                />
                <input
                  type="number"
                  value={filters.priceMax}
                  onChange={(e) => setFilters({ ...filters, priceMax: Number(e.target.value) })}
                  className="w-24 px-2 py-1 border border-slate-300 rounded"
                  placeholder="Max"
                />
              </div>
            </div>

            {/* Equilibrium Zone */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Equilibrium Zone
              </label>
              <div className="flex flex-col gap-1">
                {['discount', 'equilibrium', 'premium'].map(zone => (
                  <label key={zone} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={filters.equilibriumZone.includes(zone)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setFilters({ ...filters, equilibriumZone: [...filters.equilibriumZone, zone] });
                        } else {
                          setFilters({ ...filters, equilibriumZone: filters.equilibriumZone.filter(z => z !== zone) });
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-sm capitalize">{zone}</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Signal */}
            <div>
              <label className="block text-sm font-medium text-slate-700 mb-2">
                Signal
              </label>
              <div className="flex flex-col gap-1">
                {['buy', 'hold', 'sell'].map(sig => (
                  <label key={sig} className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={filters.signals.includes(sig)}
                      onChange={(e) => {
                        if (e.target.checked) {
                          setFilters({ ...filters, signals: [...filters.signals, sig] });
                        } else {
                          setFilters({ ...filters, signals: filters.signals.filter(s => s !== sig) });
                        }
                      }}
                      className="rounded"
                    />
                    <span className="text-sm capitalize">{sig}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>

          {/* Sector Filter */}
          <div className="mt-4">
            <label className="block text-sm font-medium text-slate-700 mb-2">
              Sectors
            </label>
            <div className="flex flex-wrap gap-2">
              {getSectorList().map(sector => (
                <button
                  key={sector}
                  onClick={() => {
                    if (filters.sectors.includes(sector)) {
                      setFilters({ ...filters, sectors: filters.sectors.filter(s => s !== sector) });
                    } else {
                      setFilters({ ...filters, sectors: [...filters.sectors, sector] });
                    }
                  }}
                  className={`px-3 py-1 rounded-full text-sm font-medium transition ${
                    filters.sectors.includes(sector)
                      ? 'bg-blue-600 text-white'
                      : 'bg-slate-200 text-slate-700 hover:bg-slate-300'
                  }`}
                >
                  {sector}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Results */}
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="px-6 py-4 bg-slate-50 border-b border-slate-200">
            <p className="text-sm text-slate-600">
              Showing <span className="font-semibold text-slate-800">{filteredStocks.length}</span> of {stocks.length} stocks
            </p>
          </div>

          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-slate-100 border-b border-slate-200">
                <tr>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider cursor-pointer hover:bg-slate-200" onClick={() => handleSort('symbol')}>
                    Symbol {sortField === 'symbol' && (sortDirection === 'asc' ? '↑' : '↓')}
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Name
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-semibold text-slate-600 uppercase tracking-wider cursor-pointer hover:bg-slate-200" onClick={() => handleSort('price')}>
                    Price {sortField === 'price' && (sortDirection === 'asc' ? '↑' : '↓')}
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-semibold text-slate-600 uppercase tracking-wider cursor-pointer hover:bg-slate-200" onClick={() => handleSort('changePercent')}>
                    Change {sortField === 'changePercent' && (sortDirection === 'asc' ? '↑' : '↓')}
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-semibold text-slate-600 uppercase tracking-wider cursor-pointer hover:bg-slate-200" onClick={() => handleSort('rsi')}>
                    RSI {sortField === 'rsi' && (sortDirection === 'asc' ? '↑' : '↓')}
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Equilibrium
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Trend
                  </th>
                  <th className="px-4 py-3 text-center text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Signal
                  </th>
                  <th className="px-4 py-3 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Sector
                  </th>
                  <th className="px-4 py-3"></th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {filteredStocks.map((stock) => (
                  <React.Fragment key={stock.symbol}>
                    <tr className="hover:bg-slate-50 transition">
                      <td className="px-4 py-3 whitespace-nowrap">
                        <span className="font-semibold text-slate-800">{stock.symbol}</span>
                      </td>
                      <td className="px-4 py-3">
                        <div className="text-sm text-slate-700">{stock.name}</div>
                        <div className="text-xs text-slate-500">{stock.industry}</div>
                      </td>
                      <td className="px-4 py-3 text-right whitespace-nowrap">
                        <span className="font-medium text-slate-800">${stock.price.toFixed(2)}</span>
                      </td>
                      <td className="px-4 py-3 text-right whitespace-nowrap">
                        <div className={`flex items-center justify-end gap-1 ${stock.changePercent >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {stock.changePercent >= 0 ? <TrendingUp className="w-4 h-4" /> : <TrendingDown className="w-4 h-4" />}
                          <span className="font-medium">{stock.changePercent.toFixed(2)}%</span>
                        </div>
                      </td>
                      <td className="px-4 py-3 text-right">
                        <span className={`font-medium ${
                          stock.rsi < 30 ? 'text-green-600' : 
                          stock.rsi > 70 ? 'text-red-600' : 
                          'text-slate-700'
                        }`}>
                          {stock.rsi.toFixed(1)}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${getEquilibriumColor(stock.priceToEquilibrium)}`}>
                          {getEquilibriumZone(stock.priceToEquilibrium)}
                          <div className="text-xs mt-0.5">{stock.priceToEquilibrium.toFixed(1)}%</div>
                        </span>
                      </td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium ${
                          stock.trend === 'bullish' ? 'bg-green-100 text-green-800' :
                          stock.trend === 'bearish' ? 'bg-red-100 text-red-800' :
                          'bg-slate-100 text-slate-800'
                        }`}>
                          {stock.trend}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-center">
                        <span className={`inline-block px-2 py-1 rounded-full text-xs font-bold uppercase ${
                          stock.signal === 'buy' ? 'bg-green-600 text-white' :
                          stock.signal === 'sell' ? 'bg-red-600 text-white' :
                          'bg-slate-300 text-slate-700'
                        }`}>
                          {stock.signal}
                        </span>
                      </td>
                      <td className="px-4 py-3">
                        <span className="text-sm text-slate-700">{stock.sector}</span>
                      </td>
                      <td className="px-4 py-3">
                        <button
                          onClick={() => setExpandedRow(expandedRow === stock.symbol ? null : stock.symbol)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          {expandedRow === stock.symbol ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
                        </button>
                      </td>
                    </tr>
                    
                    {/* Expanded Details Row */}
                    {expandedRow === stock.symbol && (
                      <tr className="bg-slate-50">
                        <td colSpan={10} className="px-4 py-4">
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                            <div>
                              <h4 className="text-xs font-semibold text-slate-600 uppercase mb-2">Technical Indicators</h4>
                              <div className="space-y-1 text-sm">
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Stoch RSI:</span>
                                  <span className="font-medium">{stock.stochRsi.toFixed(1)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Historic RSI:</span>
                                  <span className="font-medium">{stock.historicRsiAvg.toFixed(1)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">MACD:</span>
                                  <span className={`font-medium ${stock.macdHistogram > 0 ? 'text-green-600' : 'text-red-600'}`}>
                                    {stock.macd.toFixed(2)}
                                  </span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">MACD Signal:</span>
                                  <span className="font-medium">{stock.macdSignal.toFixed(2)}</span>
                                </div>
                              </div>
                            </div>

                            <div>
                              <h4 className="text-xs font-semibold text-slate-600 uppercase mb-2">Moving Averages</h4>
                              <div className="space-y-1 text-sm">
                                <div className="flex justify-between">
                                  <span className="text-slate-600">SMA 50:</span>
                                  <span className="font-medium">${stock.sma50.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">SMA 200:</span>
                                  <span className="font-medium">${stock.sma200.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">EMA 20:</span>
                                  <span className="font-medium">${stock.ema20.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Volume Profile:</span>
                                  <span className={`font-medium uppercase ${
                                    stock.volumeProfile === 'high' ? 'text-green-600' :
                                    stock.volumeProfile === 'low' ? 'text-red-600' :
                                    'text-yellow-600'
                                  }`}>
                                    {stock.volumeProfile}
                                  </span>
                                </div>
                              </div>
                            </div>

                            <div>
                              <h4 className="text-xs font-semibold text-slate-600 uppercase mb-2">Equilibrium Analysis</h4>
                              <div className="space-y-1 text-sm">
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Equilibrium:</span>
                                  <span className="font-medium">${stock.equilibriumLevel.toFixed(2)}</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Distance:</span>
                                  <span className={`font-medium ${getEquilibriumColor(stock.priceToEquilibrium).split(' ')[0]}`}>
                                    {stock.priceToEquilibrium.toFixed(1)}%
                                  </span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">From 52W High:</span>
                                  <span className="font-medium text-red-600">{stock.distanceFrom52WeekHigh.toFixed(1)}%</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">From 52W Low:</span>
                                  <span className="font-medium text-green-600">{stock.distanceFrom52WeekLow.toFixed(1)}%</span>
                                </div>
                              </div>
                            </div>

                            <div>
                              <h4 className="text-xs font-semibold text-slate-600 uppercase mb-2">Market Data</h4>
                              <div className="space-y-1 text-sm">
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Volume:</span>
                                  <span className="font-medium">{(stock.volume / 1000000).toFixed(2)}M</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Market Cap:</span>
                                  <span className="font-medium">${(stock.marketCap / 1000000000).toFixed(2)}B</span>
                                </div>
                                <div className="flex justify-between">
                                  <span className="text-slate-600">Industry:</span>
                                  <span className="font-medium text-xs">{stock.industry}</span>
                                </div>
                              </div>
                            </div>
                          </div>

                          {/* Trading Insights */}
                          <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                            <h4 className="text-sm font-semibold text-blue-900 mb-2">Trading Insights</h4>
                            <div className="text-sm text-blue-800">
                              {stock.signal === 'buy' && stock.priceToEquilibrium < -10 && (
                                <p>💡 <strong>Strong Buy Setup:</strong> Price is in discount zone ({stock.priceToEquilibrium.toFixed(1)}% below equilibrium) with oversold RSI ({stock.rsi.toFixed(1)}). Consider entry for swing trade.</p>
                              )}
                              {stock.signal === 'sell' && stock.priceToEquilibrium > 10 && (
                                <p>⚠️ <strong>Potential Exit:</strong> Price is in premium zone ({stock.priceToEquilibrium.toFixed(1)}% above equilibrium) with overbought RSI ({stock.rsi.toFixed(1)}). Consider taking profits.</p>
                              )}
                              {stock.signal === 'hold' && Math.abs(stock.priceToEquilibrium) < 5 && (
                                <p>⚖️ <strong>At Equilibrium:</strong> Price is near the 50% retracement level. Wait for clear directional move before entering.</p>
                              )}
                              {stock.trend === 'bullish' && stock.price > stock.sma50 && stock.sma50 > stock.sma200 && (
                                <p className="mt-2">📈 <strong>Strong Uptrend:</strong> Price above SMA50 (${stock.sma50.toFixed(2)}) and SMA50 above SMA200 (${stock.sma200.toFixed(2)}). Trend is intact.</p>
                              )}
                              {stock.trend === 'bearish' && stock.price < stock.sma50 && stock.sma50 < stock.sma200 && (
                                <p className="mt-2">📉 <strong>Strong Downtrend:</strong> Price below SMA50 and SMA50 below SMA200. Consider short setups or avoid longs.</p>
                              )}
                              {stock.macdHistogram > 0 && stock.macd > stock.macdSignal && (
                                <p className="mt-2">✅ <strong>MACD Bullish:</strong> MACD ({stock.macd.toFixed(2)}) above signal line ({stock.macdSignal.toFixed(2)}). Momentum is positive.</p>
                              )}
                              {stock.macdHistogram < 0 && stock.macd < stock.macdSignal && (
                                <p className="mt-2">❌ <strong>MACD Bearish:</strong> MACD below signal line. Momentum is negative.</p>
                              )}
                            </div>
                          </div>
                        </td>
                      </tr>
                    )}
                  </React.Fragment>
                ))}
              </tbody>
            </table>
          </div>

          {filteredStocks.length === 0 && (
            <div className="text-center py-12">
              <p className="text-slate-500">No stocks match your current filters</p>
            </div>
          )}
        </div>

        {/* Footer Info */}
        <div className="mt-6 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h3 className="text-sm font-semibold text-blue-900 mb-2">📊 About Equilibrium Trading</h3>
          <p className="text-sm text-blue-800">
            <strong>Equilibrium</strong> represents the 50% retracement level between a stock's 52-week high and low. 
            The <strong>Discount Zone</strong> (below -5%) is where smart money typically accumulates positions, 
            while the <strong>Premium Zone</strong> (above +5%) is where distribution often occurs. 
            Combine equilibrium analysis with RSI, MACD, and trend indicators for optimal swing trade entries.
          </p>
        </div>
      </div>
    </div>
  );
};

export default StockScanner;